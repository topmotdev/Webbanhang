@model WebApplication1.Models.EF.New
<a href="~/ckeditor5-build-classic/ckeditor.js.map">~/ckeditor5-build-classic/ckeditor.js.map</a>
<script src="~/ckeditor5-build-classic/ckeditor.js"></script>
@{
    ViewData["Title"] = "Thêm danh mục mới";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
}
<h2>Thêm danh mục</h2>
<div class="bs-stepper-content">
    @using (Html.BeginForm("Add", "New", FormMethod.Post, new { }))
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true)
        <div class="form-group">
            <label for="exampleInputEmail1">Tên danh mục</label>
            @Html.TextBoxFor(x => x.Title, new { @class = "form-control", placeholder = "Nhập tên danh mục" })
            @Html.ValidationMessageFor(x => x.Title, null, new { @class = "text-danger" })
        </div>
        <div class="form-group">
            <label for="exampleInputPassword1">Mô tả</label>
            @Html.TextAreaFor(x => x.Description, new { @class = "form-control" })
        </div>
        <div class="hd">
            <label for="exampleInputEmail1">Ảnh đại diện</label>
            @Html.TextAreaFor(x => x.Image, new { @class = "form-control", @id = "txtImg" })
            
        </div>
        
        <div class="form-group">
            <label for="exampleInputPassword1">Seotitle</label>
            @Html.TextAreaFor(x => x.SeoTitle, new { @class = "form-control" })
        </div>
        <div class="form-group">
            <label for="exampleInputPassword1">SeoDescription</label>
            @Html.TextAreaFor(x => x.SeoDescription, new { @class = "form-control" })
        </div>
        <div class="form-group">
            <label for="exampleInputPassword1">SeoKeywords</label>
            @Html.TextAreaFor(x => x.SeoKeywords, new { @class = "form-control" })
        </div>
        <div class="form-group">
            <label for="exampleInputPassword1">CategoryID</label>
            @Html.TextAreaFor(x => x.CategoryID, new { @class = "form-control" })
        </div>
        <div class="form-group">
            <label for="exampleInputEmail1">Chi Tiết</label>
            @Html.TextAreaFor(x => x.Detail, new { @class = "form-control" ,@id="txtDetail"})
        </div>
        <div id="information-part" class="content" role="tabpanel" aria-labelledby="information-part-trigger">

            <a class="btn btn-info" href="/admin/new">Về trang Admin</a>
            <button type="submit" class="btn btn-success">Thêm</button>
        </div>
        <style>
            /* Ẩn các phần tử không cần thiết */
            .hd .ck-toolbar__items > *:not(:nth-child(10)) {
                display: none;
            }

            .hd .ck.ck-toolbar .ck.ck-toolbar__separator {
                align-self: initial;
            }
        </style>
    }
    <!-- your steps content here -->

</div>
<style>
    /* Ẩn tất cả các phần tử SVG trong div trừ phần tử có class là ck-button__icon */
    
</style>
<script>
    class MyUploadAdapter {
        constructor(loader) {
            // The file loader instance to use during the upload. It sounds scary but do not
            // worry — the loader will be passed into the adapter later on in this guide.
            this.loader = loader;
        }

        // More methods.
        // ...
        upload() {
            return this.loader.file
                .then(file => new Promise((resolve, reject) => {
                    this._initRequest();
                    this._initListeners(resolve, reject, file);
                    this._sendRequest(file);
                }));
        }

        // Aborts the upload process.
        abort() {
            if (this.xhr) {
                this.xhr.abort();
            }
        }
        // Initializes the XMLHttpRequest object using the URL passed to the constructor.
        _initRequest() {
            const xhr = this.xhr = new XMLHttpRequest();

            // Note that your request may look different. It is up to you and your editor
            // integration to choose the right communication channel. This example uses
            // a POST request with JSON as a data structure but your configuration
            // could be different.
            xhr.open('POST', '@Url.Action("UploadImage","New")', true);
            xhr.responseType = 'json';
        }
        // Initializes XMLHttpRequest listeners.
        _initListeners(resolve, reject, file) {
            const xhr = this.xhr;
            const loader = this.loader;
            const genericErrorText = `Couldn't upload file: ${file.name}.`;

            xhr.addEventListener('error', () => reject(genericErrorText));
            xhr.addEventListener('abort', () => reject());
            xhr.addEventListener('load', () => {
                const response = xhr.response;

                // This example assumes the XHR server's "response" object will come with
                // an "error" which has its own "message" that can be passed to reject()
                // in the upload promise.
                //
                // Your integration may handle upload errors in a different way so make sure
                // it is done properly. The reject() function must be called when the upload fails.
                if (!response || response.error) {
                    return reject(response && response.error ? response.error.message : genericErrorText);
                }

                // If the upload is successful, resolve the upload promise with an object containing
                // at least the "default" URL, pointing to the image on the server.
                // This URL will be used to display the image in the content. Learn more in the
                // UploadAdapter#upload documentation.
                resolve({
                    default: response.url
                });
            });

            // Upload progress when it is supported. The file loader has the #uploadTotal and #uploaded
            // properties which are used e.g. to display the upload progress bar in the editor
            // user interface.
            if (xhr.upload) {
                xhr.upload.addEventListener('progress', evt => {
                    if (evt.lengthComputable) {
                        loader.uploadTotal = evt.total;
                        loader.uploaded = evt.loaded;
                    }
                });
            }
        }
        _sendRequest(file) {
            // Prepare the form data.
            const data = new FormData();

            data.append('upload', file);

            // Important note: This is the right place to implement security mechanisms
            // like authentication and CSRF protection. For instance, you can use
            // XMLHttpRequest.setRequestHeader() to set the request headers containing
            // the CSRF token generated earlier by your application.

            // Send the request.
            this.xhr.send(data);
        }
    }
    function MyCustomUploadAdapterPlugin(editor) {
        editor.plugins.get('FileRepository').createUploadAdapter = (loader) => {
            // Configure the URL to the upload script in your backend here!
            return new MyUploadAdapter(loader);
        };
    }
    ClassicEditor
        .create(document.querySelector("#txtDetail"), {
            extraPlugins: [MyCustomUploadAdapterPlugin],
        })
        .then(editor => {
            window.editor = editor;

            // Thêm sự kiện để cập nhật giá trị trong trường ẩn khi trình soạn thảo thay đổi
            editor.model.document.on('change', () => {
                document.getElementById('txtDetail').value = editor.getData();
                console.log('Hidden Detail value:', document.getElementById('txtDetail').value);
            });
            
        })

        .catch(err => {
            console.error(err.stack);
        });
    ClassicEditor
        .create(document.querySelector("#txtImg"), {
            extraPlugins: [MyCustomUploadAdapterPlugin],
        })
        .then(editor => {
            window.editor = editor;

            // Thêm sự kiện để cập nhật giá trị trong trường ẩn khi trình soạn thảo thay đổi
            editor.model.document.on('change', () => {
                document.getElementById('txtDetail').value = editor.getData();
                console.log('Hidden Detail value:', document.getElementById('txtDetail').value);
            });

        })

        .catch(err => {
            console.error(err.stack);
        });
               
    
</script>

